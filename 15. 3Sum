/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
*/


var threeSum = function(nums) {
 nums.sort((a, b) => a - b)
    const result = [];
    for (let index = 0; index < nums.length - 2;)
    {
        const num = nums[index]
        if (num > 0) break
        let left = index + 1, right = nums.length - 1
        while (!Object.is(left, right))
        {
            const [numsLeft, numsRight] = [left, right].map(_ => nums[_])
            const total = num + numsLeft + numsRight
            if (Object.is(total, 0)) result.push([num, numsLeft, numsRight])
            if (total <= 0) while (!Object.is(left, right) && Object.is(nums[left], numsLeft)) ++left
            if (total >= 0) while (!Object.is(left, right) && Object.is(nums[right], numsRight)) --right
        }
        while (index < nums.length - 2 && Object.is(num, nums[index])) ++index
    }
    return result
};
