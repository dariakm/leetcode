Medium
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, 
which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

var minPathSum = function(grid) {
    let dp = grid.map( line => new Array(line.length).fill(0));
    
    for (let y = 0; y < grid.length; y++) {
        for (let x = 0; x < grid[0].length; x++) {
            if (y === 0 && x === 0) dp[y][x] = grid[y][x]
            else if (y === 0) dp[y][x] = grid[y][x] + dp[y][x-1];
            else if (x === 0) dp[y][x] = grid[y][x] + dp[y-1][x];
            else dp[y][x] = Math.min(dp[y-1][x] + grid[y][x], dp[y][x-1] + grid[y][x])
        }
    }

    return dp[grid.length-1][grid[0].length-1];
};



// var minPathSum = function(grid) {
//     let res = 0;
//     const recursive = (y, x, sum) => {
//         sum += grid[y][x];
//         if (typeof grid[y+1] === "undefined" && typeof grid[y][x+1] === "undefined") return sum;
//         if (typeof grid[y+1] === "undefined") return recursive(y, x+1, sum)
//         if (typeof grid[y][x+1] === "undefined") return recursive(y+1, x, sum);
        
//         return Math.min(recursive(y+1, x, sum), recursive(y, x+1, sum));
//     }
    
//     return recursive(0,0,0);
// };


